#!/usr/bin/env ruby

require 'open3'
require 'optparse'
require 'tempfile'
require_relative '../lib/natalie'

orig_args = ARGV.dup

options = { load_path: [] }
OptionParser.new do |opts|
  opts.banner = 'Usage: natalie [options] file.nat'

  opts.on('-d [level]', '--debug [level]', 'Show debug output') do |level|
    case level
    when 'p1'
      ENV['DEBUG_PASS1'] = 'true'
    when 'p2'
      ENV['DEBUG_PASS2'] = 'true'
    when 'p3'
      ENV['DEBUG_PASS3'] = 'true'
    else
      ENV['DEBUG'] = 'true'
    end
  end

  opts.on('-e one-line-script', 'Execute one-line script') do |e|
    options[:execute] = e
  end

  opts.on('--ast', 'Show AST rather than compiling') do |ast|
    options[:ast] = ast
  end

  opts.on('-c path', '--compile path', 'Compile to binary but do not execute') do |path|
    options[:compile] = path
  end

  opts.on('--compile-obj path', 'Compile to object file') do |path|
    options[:compile] = path
    options[:compile_obj] = true
  end

  opts.on('-I path', 'Specify $LOAD_PATH directory (may be used more than once)') do |p|
    options[:load_path].unshift(p)
  end
end.parse!

build_type_path = File.expand_path('../.build', __dir__)
if File.exist?(build_type_path)
  ENV['BUILD'] = File.read(build_type_path).strip
else
  ENV['BUILD'] = 'debug'
end

if options[:execute]
  source_path = '-e'
  code = options[:execute].gsub(/\\n/, "\n")
elsif ARGV.any?
  source_path = ARGV.shift
  code = File.read(source_path)
else
  source_path = '.'
  repl = Natalie::Repl.new
  repl.go
  exit
end

parser = Natalie::Parser.new(code, source_path)
ast = parser.ast

if options[:ast]
  require 'pp'
  pp ast
elsif options[:compile]
  compiler = Natalie::Compiler.new(ast, source_path)
  compiler.load_path = options[:load_path]
  compiler.compile_to_object_file = options[:compile_obj]
  compiler.out_path = options[:compile]
  compiler.compile
else
  compiler = Natalie::Compiler.new(ast, source_path)
  compiler.load_path = options[:load_path]
  extension = if RUBY_PLATFORM =~ /msys/
                '.exe'
              else
                ''
              end
  out = Tempfile.create("natalie#{extension}")
  out.close
  compiler.out_path = out.path
  compiler.compile
  puts out.path if ENV['DEBUG']
  status = nil
  pid = spawn(out.path, *ARGV)
  Process.wait(pid)
  status = $?
  exit status.to_i
end
