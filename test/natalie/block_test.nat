require_relative '../spec_helper'

class ArrayLike
  def initialize(*values)
    @values = values
  end

  def to_ary
    @values
  end
end

describe 'block' do
  describe 'arguments' do
    it 'can assign any number of arguments' do
      proc { |a| a }.call.should == nil
      proc { |a| a }.call(1).should == 1
      proc { |a| a }.call(1, 2).should == 1
      proc { |a, b| [a, b] }.call.should == [nil, nil]
      proc { |a, b| [a, b] }.call(1).should == [1, nil]
      proc { |a, b| [a, b] }.call(1, 2).should == [1, 2]
      proc { |a, b| [a, b] }.call(1, 2, 3).should == [1, 2]
      proc { |a, | a }.call(1, 2).should == 1
      proc { |a, | a }.call([3, 4]).should == 3
    end

    it 'can assign with argument defaults' do
      proc { |a=1| a }.call().should == 1
      proc { |a, b=1| [a, b] }.call.should == [nil, 1]
      proc { |a, b=1| [a, b] }.call(1).should == [1, 1]
      proc { |a, b=1| [a, b] }.call(1, 2, 3).should == [1, 2]
      #proc { |a=1, b| [a, b] }.call.should == [1, nil]
      #proc { |a=1, b| [a, b] }.call(1).should == [1, 1]
      #proc { |a=1, b| [a, b] }.call(1, 2).should == [1, 2]
      #proc { |a=1, b| [a, b] }.call(1, 2, 3).should == [1, 2]
      #proc { |a=1, b| [a, b] }.call([1]).should == [1, 1]
      #proc { |a=1, b| [a, b] }.call([1, 2]).should == [1, 2]
      #proc { |a=1, b| [a, b] }.call([1, 2, 3]).should == [1, 2]
    end

    xit 'can match arrays inside arguments' do
      #proc { |a, (b, c)| [a, b, c] }.call.should == [nil, nil, nil]
      #proc { |a, (b, c)| [a, b, c] }.call(1).should == [1, nil, nil]
      #proc { |a, (b, c)| [a, b, c] }.call(1, [2]).should == [1, 2, nil]
      #proc { |a, (b, c)| [a, b, c] }.call(1, [2, 3]).should == [1, 2, 3]
      #proc { |a, (b, c)| [a, b, c] }.call([1]).should == [1, nil, nil]
      #proc { |a, (b, c)| [a, b, c] }.call([1, [2]]).should == [1, 2, nil]
      #proc { |a, (b, c)| [a, b, c] }.call([1, [2, 3]]).should == [1, 2, 3]
    end
  end
end
