# skip-test

class SpecFailedException < StandardError; end

@specs = []

def describe(description)
  @describe = description
  yield
end

def xit(test, &block)
  @specs << [@describe, test, nil]
end

def it(test, &block)
  @specs << [@describe, test, block]
end

class Object
  def must_equal(other)
    if self == other
      nil
    else
      raise SpecFailedException, self.inspect + ' is not equal to ' + other.inspect
    end
  end

  def must_not_equal(other)
    if self == other
      raise SpecFailedException, self.inspect + ' is equal to ' + other.inspect
    end
  end

  def must_be_a(klass)
    if klass === self
      nil
    else
      raise SpecFailedException, self.inspect + ' is not a ' + klass.inspect
    end
  end
end

def run_specs
  @failures = []
  @skipped = []

  @specs.each do |test|
    fn = test.last
    if fn
      begin
        fn.call
      rescue => e
        print 'F'
        @failures << [test[0], test[1], e.message]
      else
        print '.'
      end
    else
      @skipped << [test[0], test[1]]
      print '*'
    end
  end

  if @failures.any?
    puts
    puts
    puts 'Failed specs:'
    @failures.each do |failure|
      puts failure[0]
      puts '  ' + failure[1]
      puts '    ' + failure[2]
    end
    puts
    puts (@specs.size - @failures.size).to_s + ' spec(s) passed.'
    puts @failures.size.to_s + ' spec(s) failed.'
    puts @skipped.size.to_s + ' spec(s) skipped.' if @skipped.any?
    exit 1
  else
    puts
    puts @specs.size.to_s + ' spec(s) passed.'
    puts @skipped.size.to_s + ' spec(s) skipped.' if @skipped.any?
  end
end
